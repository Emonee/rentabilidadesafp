<article>
  <p>Fondo a visualizar:</p>
  <select id="fondo2" style="max-width: 200px;">
    <option value="A">A</option>
    <option value="B">B</option>
    <option value="C">C</option>
    <option value="D">D</option>
    <option value="E">E</option>
  </select>
  <div><canvas id="super"></canvas></div>
</article>

<script>
import { HISTORICAL_DATA_FILE_ROUTE } from "@/consts/data"
import { Chart, type ChartDataset } from "chart.js"

let chart: Chart | null = null
let selectedFondo = 'A'
let content: string[]
generateChart()
const labels: string[] = []
const firstYear = 2005
const actualYear = new Date().getFullYear()
const years = [...Array(actualYear - firstYear + 1).keys()].map(i => firstYear + i)
const months = [...Array(12).keys()].map(i => 1 + i)
for (const year of years) {
  for (const month of months) labels.push(`${year}-${month.toString().padStart(2, '0')}`)
}
document.querySelector<HTMLSelectElement>('#fondo2')?.addEventListener('change', (event) => {
  const value = (event.target as HTMLSelectElement)?.value as typeof selectedFondo
  selectedFondo = value
  if (!chart) return
  chart.data.datasets = generateDataset()
  chart.update()
})
async function generateChart() {
  if (!content) {
    const superRes = await fetch(HISTORICAL_DATA_FILE_ROUTE.route)
    const text = await superRes.text()
    content = text.split('\n')
    content.shift()?.split(',')
  }
  const zeroLinePlugin = {
    id: 'zeroLine', // Custom ID for the plugin
    beforeDatasetsDraw(chart: Chart) {
      const yScale = chart.scales['y'];
      const ctx = chart.ctx;
      const yValue = yScale.getPixelForValue(0); // Get the pixel value for zero on the Y-axis
  
      ctx.save();
      ctx.beginPath();
      ctx.moveTo(chart.chartArea.left, yValue); // Start drawing from the left of the chart
      ctx.lineTo(chart.chartArea.right, yValue); // Draw to the right of the chart
      ctx.lineWidth = 1; // Set line width
      ctx.strokeStyle = 'rgba(180, 0, 0, 1)'; // Set line color (red, with 70% opacity)
      ctx.stroke();
      ctx.restore();
    }
  };
  chart = new Chart(
    (document.getElementById('super') as HTMLCanvasElement),
    {
      type: 'line',
      options: {
        interaction: {
          mode: 'nearest',
          intersect: false,
          axis: 'x'
        },
        scales: {
          y: {
            max: 140,
            min: -40,
            title: {
              display: true,
              text: 'Rentabilidad real (%)',
              font: {
                size: 20
              }
            },
            ticks: {
              callback: (value) => `${value}%`
            }
          },
          x: {
            title: {
              display: true,
              text: 'Tiempo (AÃ±o-Mes)',
              font: {
                size: 20
              }
            }
          }
        }
      },
      data: {
        labels: labels,
        datasets: generateDataset()
      },
      plugins: [zeroLinePlugin]
    }
  );
}
function generateDataset(): ChartDataset[] {
  const datasets: { [key: string]: Array<number | null> } = {};
  for (const line of content) {
    const [afpName, month, year, fondo, rentability] = line.split(',');
    if (fondo !== selectedFondo) continue
    datasets[afpName] ||= []
    const index = labels.indexOf(`${year}-${month}`)
    if (index < 0) continue
    datasets[afpName][index] = rentability === '\r' ? null : +rentability
  }
  return Object.entries(datasets).map(([label, data]) => ({ label, data: calculateAccumulatedRentability(data), tension: 0.2, pointRadius: 0, pointHoverRadius: 7 }))
}
function calculateAccumulatedRentability(rentabilities: Array<number | null>): Array<number | null> {
  const accumulatedRentabilities: Array<number | null> = [];
  let accumulatedValue = 0;
  for (const rentability of rentabilities) {
    if (rentability == null) {
      accumulatedRentabilities.push(rentability)
      continue
    }
    accumulatedValue += accumulatedValue * (rentability / 100) + rentability;
    accumulatedRentabilities.push(accumulatedValue);
  }
  return accumulatedRentabilities;
}
</script>
    