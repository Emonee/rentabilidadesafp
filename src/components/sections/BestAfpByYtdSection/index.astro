---
import jsonData from '@/data/ytd_12_months.json'
import { FONDOS } from '@/consts/afp'
import { getColor } from '@/lib/utilities/nums'
import type { Found } from '@/lib/utilities/types'

const afpEntries = Object.entries(jsonData)
const getSortedAfpsByFound = (found: Found) =>
  afpEntries
    .map(([afpName, fondos]) => ({
      name: afpName,
      value: fondos[found].ytd
    }))
    .sort(({ value: value1 }, { value: value2 }) => value2 - value1)
const initialSortedAfps = getSortedAfpsByFound('A')
const [initialBestAfp] = initialSortedAfps
---

<section>
  <h2>
    Mejor AFP <span data-tooltip="Year To Date">YTD</span> por fondo: <span
      data-span-best-ytd-afp>{initialBestAfp.name}</span
    >
    <a href="#last-data" style="text-decoration: none"> * </a>
  </h2>
  <p>
    Corresponde al raking por rentabilidad real acumulada desde inicios del
    presente a√±o a la actualidad.
  </p>
  <p>
    <b>Fondo a visualizar:</b>
  </p>
  <select name="found" style="max-width: 200px;">
    {FONDOS.map(({ name }) => <option value={name}>{name}</option>)}
  </select>
  <table style="max-width: 500px;" data-best-ytd-afp-table>
    {
      FONDOS.map(({ name }, index) => {
        const sortedAfps = getSortedAfpsByFound(name)
        return (
          <tbody
            data-found={name}
            style={{ display: index === 0 ? undefined : 'none' }}
          >
            {sortedAfps.map(({ name, value }) => {
              const color = getColor(10, -10, value)
              const colorStyle = `4px solid ${color}`
              return (
                <tr>
                  <td style={{ 'border-left': colorStyle }}>{name}</td>
                  <td
                    style={{
                      'border-left': colorStyle,
                      'border-right': colorStyle
                    }}
                  >
                    {value}%
                  </td>
                </tr>
              )
            })}
          </tbody>
        )
      })
    }
  </table>
</section>

<script>
  import type { Found } from '@/lib/utilities/types'

  const foundSelect = document.querySelector<HTMLSelectElement>(
    'select[name="found"]'
  )
  const table = document.querySelector<HTMLTableElement>(
    'table[data-best-ytd-afp-table]'
  )
  if (!foundSelect || !table) throw new Error('Elements not found')

  foundSelect.addEventListener('change', (e) => {
    const target = e.target as HTMLSelectElement
    const found = target.value as Found
    const tbs = table.querySelectorAll<HTMLTableSectionElement>('tbody')
    tbs.forEach((tb) => {
      tb.style.display = 'none'
    })
    const tbody = table.querySelector<HTMLTableSectionElement>(
      `tbody[data-found="${found}"]`
    )!
    tbody.style.display = 'table-row-group'
  })
</script>
