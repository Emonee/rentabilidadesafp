<h2>Mejor AFP por periodo y fondo: <span data-best-afp-by-period-span></span></h2>
<p>Corresponde al raking por rentabilidad real acumulada desde el periodo y fondo seleccionado.</p>
<p><b>Fondo a visualizar:</b></p>
<form id="period-ranking-form" style="max-width: 500px;">
  <select name="fondo" style="max-width: 200px;">
    <option value="A">A</option>
    <option value="B">B</option>
    <option value="C">C</option>
    <option value="D">D</option>
    <option value="E">E</option>
  </select>
  <p><b>Periodo:</b></p>
  <div role="group" style="display: flex; align-items: center;">
    <p style="margin: 0 10px 0 0;">Desde</p>
    <select name="monthFrom">
      <option value="01">Enero</option>
      <option value="02">Febrero</option>
      <option value="03">Marzo</option>
      <option value="04">Abril</option>
      <option value="05">Mayo</option>
      <option value="06">Junio</option>
      <option value="07">Julio</option>
      <option value="08">Agosto</option>
      <option value="09">Septiembre</option>
      <option value="10">Octubre</option>
      <option value="11">Noviembre</option>
      <option value="12">Diciembre</option>
    </select>
    <select name="yearFrom">
      <option value="2005">2005</option>
      <option value="2006">2006</option>
      <option value="2007">2007</option>
      <option value="2008">2008</option>
      <option value="2009">2009</option>
      <option value="2010">2010</option>
      <option value="2011">2011</option>
      <option value="2012">2012</option>
      <option value="2013">2013</option>
      <option value="2014">2014</option>
      <option value="2015">2015</option>
      <option value="2016">2016</option>
      <option value="2017">2017</option>
      <option value="2018">2018</option>
      <option value="2019">2019</option>
      <option value="2020">2020</option>
      <option value="2021">2021</option>
      <option value="2022">2022</option>
      <option value="2023">2023</option>
      <option value="2024">2024</option>
    </select>
  </div>
  <div role="group" style="display: flex; align-items: center;">
    <p style="margin: 0 10px 0 0;">Hasta</p>
    <select name="monthTo">
      <option value="01">Enero</option>
      <option value="02">Febrero</option>
      <option value="03">Marzo</option>
      <option value="04">Abril</option>
      <option value="05">Mayo</option>
      <option value="06">Junio</option>
      <option value="07">Julio</option>
      <option value="08">Agosto</option>
      <option value="09">Septiembre</option>
      <option value="10">Octubre</option>
      <option value="11">Noviembre</option>
      <option value="12">Diciembre</option>
    </select>
    <select name="yearTo">
      <option value="2005">2005</option>
      <option value="2006">2006</option>
      <option value="2007">2007</option>
      <option value="2008">2008</option>
      <option value="2009">2009</option>
      <option value="2010">2010</option>
      <option value="2011">2011</option>
      <option value="2012">2012</option>
      <option value="2013">2013</option>
      <option value="2014">2014</option>
      <option value="2015">2015</option>
      <option value="2016">2016</option>
      <option value="2017">2017</option>
      <option value="2018">2018</option>
      <option value="2019">2019</option>
      <option value="2020">2020</option>
      <option value="2021">2021</option>
      <option value="2022">2022</option>
      <option value="2023">2023</option>
      <option value="2024">2024</option>
    </select>
  </div>
  <button type="submit">Calcular</button>
</form>
<table data-best-afp-by-period-table style="max-width: 500px;">
  <tbody></tbody>
</table>
<div data-out-of-period-container style="display: none;">
  <p>Las siguientes AFP quedaron fuera del ranking por no existir dentro del periodo completo:</p>
  <ul data-out-of-period-afp></ul>
</div>
<script>
import { getColor } from "@/lib/nums"
import { getRetability } from "@/lib/nums"

  const AFPS = ['UNO', 'MODELO', 'PLANVITAL', 'HABITAT', 'CAPITAL', 'CUPRUM', 'PROVIDA', 'SISTEMA']
  const tableBody = document.querySelector('table[data-best-afp-by-period-table] tbody')
  const outOfPeriodAfspUl = document.querySelector('ul[data-out-of-period-afp]') as HTMLUListElement
  const form = document.querySelector<HTMLFormElement>('#period-ranking-form')
  const monthFromSelect = document.querySelector<HTMLSelectElement>('select[name="monthFrom"]')
  const yearFromSelect = document.querySelector<HTMLSelectElement>('select[name="yearFrom"]')
  const monthToSelect = document.querySelector<HTMLSelectElement>('select[name="monthTo"]')
  const yearToSelect = document.querySelector<HTMLSelectElement>('select[name="yearTo"]')
  const outOfPeriodContainer = document.querySelector<HTMLDivElement>('div[data-out-of-period-container]')
  const now = new Date()
  const threeYearsBefore = new Date()

  let selectedFound = 'A'
  let csvData: string

  threeYearsBefore.setFullYear(threeYearsBefore.getFullYear() - 3)
  threeYearsBefore.setMonth(threeYearsBefore.getMonth() + 1)
  if (monthFromSelect) monthFromSelect.value = (threeYearsBefore.getMonth() + 1).toString().padStart(2, '0')
  if (yearFromSelect) yearFromSelect.value = threeYearsBefore.getFullYear().toString()
  if (monthToSelect) monthToSelect.value = (now.getMonth() + 1).toString().padStart(2, '0')
  if (yearToSelect) yearToSelect.value = now.getFullYear().toString()


  form?.addEventListener('submit', (event) => {
    event.preventDefault()
    const { fondo } = Object.fromEntries(new FormData(event.target as HTMLFormElement))
    selectedFound = fondo as string
    renderTable()
  })

  await getCsv()
  renderTable()

  async function getCsv () {
    if (csvData) return
    return fetch('/super.csv')
      .then(res => res.text())
      .then(text => csvData = text)
  }
  function renderTable() {
    const { afpsOutOfPeriod, data } = buildRankingData(selectedFound)
    renderAfpsOutOfPeriod(afpsOutOfPeriod)
    const fragment = document.createDocumentFragment()
    for (const [name, value] of data) {
      const tableRow = document.createElement('tr')
      const tableNameData = document.createElement('td')
      const tableValueData = document.createElement('td')
      tableNameData.textContent = name
      tableValueData.textContent = value.toString().padEnd(4, '0') + '%'
      const color = getColor(100, -100, value, false, true)
      tableNameData.style.setProperty('border-left', `4px solid ${color}`)
      tableValueData.style.setProperty('text-align', 'center')
      tableValueData.style.setProperty('border-right', `4px solid ${color}`)
      tableValueData.style.setProperty('border-left', `4px solid ${color}`)
      tableRow.appendChild(tableNameData)
      tableRow.appendChild(tableValueData)
      fragment.appendChild(tableRow)
    }
    tableBody?.replaceChildren(fragment)
  }
  function renderAfpsOutOfPeriod(afpsOutOfPeriod: Set<string>) {
    if (!afpsOutOfPeriod.size) return outOfPeriodContainer?.style.setProperty('display', 'none')
    outOfPeriodContainer?.style.removeProperty('display')
    outOfPeriodAfspUl.innerHTML = ''
    for (const afpName of afpsOutOfPeriod) {
      const li = document.createElement('li')
      li.textContent = afpName
      outOfPeriodAfspUl.appendChild(li)
    }
  }
  function buildRankingData(found: string) {
    const content = csvData.split('\n')
    content.shift()?.split(',')
    const date1 = yearMonthToDate(yearFromSelect?.value, monthFromSelect?.value)
    const date2 = yearMonthToDate(yearToSelect?.value, monthToSelect?.value)
    const fromDate = date1 < date2 ? date1 : date2
    const toDate = date1 < date2 ? date2 : date1
    const afpsOutOfPeriod: Set<string> = new Set()
    const acc: { [key: string]: Array<number> } = {}
    for (const row of content) {
      const [afpName, month, year, fondo, rentability] = row.split(',')
      const date = new Date(`${year}-${month}-02`)
      if (date < fromDate || date > toDate || fondo !== found || !AFPS.includes(afpName) || afpsOutOfPeriod.has(afpName)) continue
      if (rentability === '\r' || (!acc[afpName] && date > fromDate)) {
        afpsOutOfPeriod.add(afpName)
        continue
      }
      acc[afpName] ||= []
      acc[afpName].push(+rentability)
    }
    for (const afpName of afpsOutOfPeriod) delete acc[afpName]
    const data = Object
      .entries(acc)
      .map<[string, number]>(([afpName, rentabilities]) => [afpName, getRetability(rentabilities)])
      .sort(([, renta1], [, renta2]) => renta2 - renta1)
    return { data, afpsOutOfPeriod }
  }
  function yearMonthToDate(year?: string, month?: string) {
    if (!year || !month) throw new TypeError()
    return new Date(`${year}-${month}-02`)
  }
</script>